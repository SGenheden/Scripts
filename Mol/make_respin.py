# Author: Samuel Genheden samuel.genheden@gmail.com

"""
Program to create RESP input

Used in membrane engineering project

Examples
--------
make_respin.py -f model0_1.pdb -e model0_1.esp --zero C8 H81 H82 H83 C2 H22 H23 C1 H11 H12 H13 -q "C3 C7" "H71 H72 H31 H32" "H51 H10" "C4 C6" "H41 H61" -n 38
    make input based on model0_1, zerp charges on C8 H81, etc and equivalent charges on C3 and C7 etc
"""
import argparse
import os

import numpy as np
import parmed

if __name__ == '__main__':

    argparser = argparse.ArgumentParser(description="Script to setup RESP input")
    argparser.add_argument('-f','--file',help="the PDB file")
    argparser.add_argument('-e','--esp',help="the esp file")
    argparser.add_argument('-n','--nmol',type=int,help="number of conformations",default=1)
    argparser.add_argument('-z','--zero',nargs="+",help="set the charges of these atoms to 0",default=[])
    argparser.add_argument('-q','--equivalence',nargs="+", help="set equivalence",default=[])
    args = argparser.parse_args()

    struct = parmed.load_file(args.file)

    ivaries = [0]*len(struct.atoms)
    for atom in args.zero :
        ivaries[struct.view["@"+atom].atoms[0].idx] = -1
    for group in args.equivalence :
        atoms = group.strip().split()
        indices = sorted([struct.view["@"+atom].atoms[0].idx for atom in atoms])
        for idx in indices[1:] :
            ivaries[idx] = indices[0]+1

    with open("resp.in","w") as f :
        f.write("RESP input generated by make_respin.py\n")
        f.write(" &cntrl\n")
        f.write("   iqopt=2, nmol=%d, ihfree=1, qwt= 0.0005\n"%args.nmol)
        f.write(" &end\n")
        for i in range(args.nmol) :
            f.write(" 1.0\n")
            f.write(" molecule\n")
            f.write("%5d%5d\n"%(0,len(struct.atoms)))
            for atom, ivary in zip(struct, ivaries) :
                f.write("%5d%5d\n"%(atom.element,ivary))
            f.write("\n")
        if args.nmol > 1 :
            f.write("\n")
            for i, atom in enumerate(struct.atoms, 1) :
                f.write("%5d\n"%args.nmol)
                for j in range(1,args.nmol+1) :
                    f.write("%5d%5d"%(j, i))
                    if j % 8 == 0 :
                        f.write("\n")
                f.write("\n")
            f.write("\n")


    espinp = []
    with open(args.esp, "r") as f :
        espinp = f.readlines()
    charges = []
    for line in espinp[4:] :
        if line.find("DIPOLE") > -1 :
            break
        charges.append(float(line.strip().split()[4].replace("D","E")))

    with open("qin","w") as f :
        for i, (atom, charge) in enumerate(zip(struct.atoms, charges), 1) :
            if atom.name not in args.zero :
                f.write("%10.6f"%charge)
            else :
                f.write("%10.6f"%0.0)
            if i % 8 == 0 : f.write("\n")
